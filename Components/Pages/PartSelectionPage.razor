@page "/selectpart/{CategoryId:int}"
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@inject RotaryEngineDbContext DbContext
@inject NavigationManager Navigation
@inject rotaryproject.Services.EngineBuildStateService BuildStateService 
@using rotaryproject.Data.Models
@using rotaryproject.Data
@using Microsoft.EntityFrameworkCore

<PageTitle>Choose @(currentCategory?.Name ?? "Part")</PageTitle>

@if (isLoading)
{
    <p><em>Loading parts...</em></p>
}
else if (currentCategory != null)
{
    <div class="container-fluid mt-3">
        <div class="row">
            @* Column for Filters *@
            <div class="col-md-3 col-lg-2">
                <h4>Filters</h4>
                <hr />

                @* --- ENGINE FAMILY FILTER --- *@
                @if (engineFamilyFilterOptions.Any())
                {
                    <div class="mb-3">
                        <h6>Engine Family</h6>
                        @foreach (var option in engineFamilyFilterOptions)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="family-@option.Id" 
                                       @bind="option.IsSelected" @bind:after="ApplyFilters" />
                                <label class="form-check-label" for="family-@option.Id">
                                    @option.Value
                                </label>
                            </div>
                        }
                    </div>
                    <hr />
                }

                @* --- BRAND FILTER --- *@
                @if (brandFilterOptions.Any())
                {
                    <div class="mb-3">
                        <h6>Brand</h6>
                        @foreach (var option in brandFilterOptions)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="brand-@option.Value?.Replace(" ", "-")" 
                                       @bind="option.IsSelected" @bind:after="ApplyFilters" />
                                <label class="form-check-label" for="brand-@option.Value?.Replace(" ", "-")">
                                    @option.Value (@option.Count)
                                </label>
                            </div>
                        }
                    </div>
                    <hr />
                }

                @* --- MATERIAL FILTER --- *@
                @if (materialFilterOptions.Any())
                {
                    <div class="mb-3">
                        <h6>Material</h6>
                        @foreach (var option in materialFilterOptions)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="material-@option.Value?.Replace(" ", "-")" 
                                       @bind="option.IsSelected" @bind:after="ApplyFilters" />
                                <label class="form-check-label" for="material-@option.Value?.Replace(" ", "-")">
                                    @option.Value (@option.Count)
                                </label>
                            </div>
                        }
                    </div>
                    <hr />
                }
                
                <button class="btn btn-sm btn-outline-secondary mt-2 w-100" @onclick="ClearFilters">Clear All Filters</button>
            </div>

            @* Column for Parts List *@
            <div class="col-md-9 col-lg-10">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h3>Available @currentCategory.Name (@(filteredPartsForCategory?.Count ?? 0) of @(allPartsForCategory?.Count ?? 0) products)</h3>
                    
                    @* --- NEW: SORT BY DROPDOWN --- *@
                    <div class="col-auto">
                        <select class="form-select form-select-sm" @bind="selectedSortOption" @bind:after="ApplyFilters">
                            <option value="default">Sort by Name</option>
                            <option value="price_asc">Price: Low to High</option>
                            <option value="price_desc">Price: High to Low</option>
                        </select>
                    </div>
                </div>
                <hr />

                @if (filteredPartsForCategory == null || !filteredPartsForCategory.Any())
                {
                    <p><em>No parts match your current filters or none available for this category.</em></p>
                }
                else
                {
                    <div class="list-group">
                        @foreach (var part in filteredPartsForCategory)
                        {
                            <div class="list-group-item mb-2 shadow-sm">
                                <div class="row g-3 align-items-center">
                                    <div class="col-md-2 text-center">
                                        @if (!string.IsNullOrEmpty(part.ImagePath))
                                        {
                                            <img src="@part.ImagePath" alt="@part.Name" class="img-fluid rounded" style="max-height: 100px; max-width: 100%; object-fit: contain;" 
                                                 onerror="this.onerror=null; this.src='https://placehold.co/100x100/e1e1e1/777?text=No+Image';" />
                                        }
                                        else
                                        {
                                            <img src="https://placehold.co/100x100/e1e1e1/777?text=No+Image" alt="No image available" class="img-fluid rounded" style="max-height: 100px; max-width: 100%; object-fit: contain;" />
                                        }
                                    </div>
                                    <div class="col-md-7">
                                        <h5><a href="/partdetail/@part.PartId">@part.Name</a></h5>
                                        <ul class="list-unstyled small text-muted mb-1">
                                            @if (!string.IsNullOrEmpty(part.Brand)) { <li><strong>Brand:</strong> @part.Brand</li> }
                                            @if (!string.IsNullOrEmpty(part.Material)) { <li><strong>Material:</strong> @part.Material</li> }
                                        </ul>
                                    </div>
                                    <div class="col-md-3 text-end">
                                        <h4>@(part.BasePrice?.ToString("C") ?? "N/A")</h4>
                                        <button class="btn btn-success btn-sm mt-2" @onclick="() => SelectThisPart(part.PartId)">
                                            Add to Build
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
        <div class="mt-4">
            <button class="btn btn-outline-secondary" @onclick="GoBackToBuilder">
                <span class="oi oi-arrow-left" aria-hidden="true"></span> Cancel / Back to Engine Builder
            </button>
        </div>
    </div>
}
else
{
    <PageTitle>Category Not Found</PageTitle>
    <h1>Category Not Found</h1>
    <p><em>The selected category (ID: @CategoryId) was not found.</em></p>
}

@code {
    [Parameter]
    public int CategoryId { get; set; }

    private List<Part> allPartsForCategory = new();
    private List<Part> filteredPartsForCategory = new();
    private PartCategory? currentCategory;
    private bool isLoading = true;
    
    // --- NEW: Property to hold the selected sort option ---
    private string selectedSortOption = "default";

    public class FilterOption
    {
        public int Id { get; set; }
        public string Value { get; set; } = string.Empty;
        public bool IsSelected { get; set; }
        public int Count { get; set; } 
    }

    private List<FilterOption> brandFilterOptions = new();
    private List<FilterOption> materialFilterOptions = new();
    private List<FilterOption> engineFamilyFilterOptions = new();

    protected override async Task OnParametersSetAsync()
    {
        isLoading = true;
        try
        {
            currentCategory = await DbContext.PartCategories.FindAsync(CategoryId);
            if (currentCategory != null)
            {
                allPartsForCategory = await DbContext.Parts
                    .Where(p => p.CategoryId == CategoryId)
                    .Include(p => p.Fitments)
                    .ToListAsync();
                
                await LoadFilterOptions();
                ApplyFilters();
            }
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task LoadFilterOptions()
    {
        if (allPartsForCategory == null) return;

        brandFilterOptions = allPartsForCategory
            .Where(p => !string.IsNullOrWhiteSpace(p.Brand))
            .GroupBy(p => p.Brand)
            .Select(g => new FilterOption { Value = g.Key!, IsSelected = false, Count = g.Count() })
            .OrderBy(fv => fv.Value)
            .ToList();

        materialFilterOptions = allPartsForCategory
            .Where(p => !string.IsNullOrWhiteSpace(p.Material))
            .GroupBy(p => p.Material)
            .Select(g => new FilterOption { Value = g.Key!, IsSelected = false, Count = g.Count() })
            .OrderBy(fv => fv.Value)
            .ToList();
            
        engineFamilyFilterOptions = await DbContext.EngineFamilies
            .OrderBy(ef => ef.FamilyCode)
            .Select(ef => new FilterOption { Id = ef.EngineFamilyId, Value = ef.FamilyCode, IsSelected = false })
            .ToListAsync();
            
        if (BuildStateService.CurrentBuild.DeterminedEngineFamilyId.HasValue)
        {
            var determinedId = BuildStateService.CurrentBuild.DeterminedEngineFamilyId.Value;
            var preselectOption = engineFamilyFilterOptions.FirstOrDefault(o => o.Id == determinedId);
            if(preselectOption != null)
            {
                preselectOption.IsSelected = true;
            }
        }
    }

    private void ApplyFilters()
    {
        if (allPartsForCategory == null) return;

        IEnumerable<Part> query = allPartsForCategory;

        // --- FILTERING LOGIC (same as before) ---
        var selectedBrands = brandFilterOptions.Where(o => o.IsSelected).Select(o => o.Value).ToList();
        if (selectedBrands.Any())
        {
            query = query.Where(p => p.Brand != null && selectedBrands.Contains(p.Brand));
        }

        var selectedMaterials = materialFilterOptions.Where(o => o.IsSelected).Select(o => o.Value).ToList();
        if (selectedMaterials.Any())
        {
            query = query.Where(p => p.Material != null && selectedMaterials.Contains(p.Material));
        }

        var selectedFamilyIds = engineFamilyFilterOptions.Where(o => o.IsSelected).Select(o => o.Id).ToList();
        if (selectedFamilyIds.Any())
        {
            query = query.Where(part =>
            {
                if (!part.Fitments.Any()) return false;
                var partFamilyIds = part.Fitments.Select(f => f.EngineFamilyId).ToHashSet();
                return selectedFamilyIds.All(selectedId => partFamilyIds.Contains(selectedId));
            });
        }
        
        // --- NEW: SORTING LOGIC ---
        // Apply sorting after all filters have been applied
        switch (selectedSortOption)
        {
            case "price_asc":
                query = query.OrderBy(p => p.BasePrice);
                break;
            case "price_desc":
                query = query.OrderByDescending(p => p.BasePrice);
                break;
            default:
                 query = query.OrderBy(p => p.Name); // Default sort by name
                break;
        }

        filteredPartsForCategory = query.ToList();
    }
    
    private void ClearFilters()
    {
        brandFilterOptions.ForEach(o => o.IsSelected = false);
        materialFilterOptions.ForEach(o => o.IsSelected = false);
        engineFamilyFilterOptions.ForEach(o => o.IsSelected = false);
        ApplyFilters();
    }

    private void SelectThisPart(int partId)
    {
        Navigation.NavigateTo($"/enginebuilder?PassedCategoryId={CategoryId}&PassedSelectedPartId={partId}");
    }

    private void GoBackToBuilder()
    {
        Navigation.NavigateTo("/enginebuilder");
    }
}
