@page "/enginebuilder"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@implements IDisposable

@inject RotaryEngineDbContext DbContext
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject rotaryproject.Services.EngineBuildStateService BuildStateService
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Identity
@using rotaryproject.Data
@using rotaryproject.Data.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Routing

<PageTitle>Build Your Rotary Engine</PageTitle>

<h1>Choose Your Engine Parts</h1>

<div class="compatibility-summary my-3 p-3 border rounded">
    @if (BuildStateService.CurrentBuild.CompatibilityIssues.Any())
    {
        <div class="alert alert-danger">
            <h5 class="alert-heading">Compatibility Alert!</h5>
            @foreach (var issue in BuildStateService.CurrentBuild.CompatibilityIssues)
            {
                <p class="mb-0">@issue</p>
            }
        </div>
    }
    else if (!string.IsNullOrEmpty(BuildStateService.CurrentBuild.DeterminedEngineFamily))
    {
        <div class="alert alert-success">
            <p class="mb-0">
                <span class="oi oi-check me-2" aria-hidden="true"></span>
                Build is compatible. Determined Engine Family: <strong>@BuildStateService.CurrentBuild.DeterminedEngineFamily</strong>
            </p>
        </div>
    }
    else
    {
         <p class="mb-0 text-muted"><em>Select core components to determine engine family and check compatibility.</em></p>
    }

    <hr />
    <h4 class="text-end">Current Total: @BuildStateService.CurrentBuild.TotalPrice.ToString("C")</h4>
</div>

@if (isLoading)
{
    <p><em>Loading categories...</em></p>
}
else if (!topLevelCategories.Any())
{
    <p><em>No part categories found. Please add some categories first.</em></p>
}
else
{
    @* --- "SHARE YOUR BUILD" AND "SAVE BUILD" BLOCKS --- *@
    @if (BuildStateService.CurrentBuild.SelectedParts.Any())
    {
        <div class="mt-4 mb-3 p-3 border rounded bg-light">
            <h4>Share Your Build</h4>
            <div class="input-group">
                <input type="text" class="form-control" @bind="shareableLink" readonly
                       placeholder="Click 'Generate Link' to create a shareable link." />
                <button class="btn btn-info" @onclick="GenerateShareableLink">Generate Link</button>
                @if (!string.IsNullOrEmpty(shareableLink))
                {
                    <button class="btn btn-outline-secondary" @onclick="CopyLinkToClipboard">Copy</button>
                }
            </div>
            @if (linkCopied)
            {
                <small class="text-success d-block mt-1">Link copied to clipboard!</small>
            }
        </div>
        <AuthorizeView>
            <Authorized>
                <div class="mt-3 p-3 border rounded bg-white">
                    <h4>Save This Build</h4>
                    @if (!string.IsNullOrEmpty(saveBuildMessage))
                    {
                        <div class="alert @(saveBuildSuccess ? "alert-success" : "alert-danger")">@saveBuildMessage</div>
                    }
                    <div class="input-group">
                        <input type="text" class="form-control" @bind="newBuildName" placeholder="Enter a name for your build" />
                        <button class="btn btn-success" @onclick="SaveCurrentBuild" disabled="@string.IsNullOrWhiteSpace(newBuildName)">Save Build</button>
                    </div>
                    <small class="form-text text-muted">Name your build to save it to your account.</small>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="mt-3 p-3 border rounded bg-light-subtle">
                    <p class="mb-0">Want to save this build? <a href="Account/Login?returnUrl=@ReturnUrlForLogin">Log in</a> or <a href="Account/Register">Register</a> to save your builds!</p>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    }

    <div class="table-responsive mt-3">
        <table class="table engine-builder-table">
            <thead class="table-light">
                <tr>
                    <th style="width: 30%;">Component</th>
                    <th style="width: 55%;">Selection(s)</th>
                    <th style="width: 15%;" class="text-center">Actions</th>
                </tr>
            </thead>
            <tbody>
                @{
                    void RenderCategoryRows(IEnumerable<PartCategory> categories, int level)
                    {
                        foreach (var category in categories.OrderBy(c => c.Name))
                        {
                            var isExpanded = BuildStateService.ExpandedCategoryIds.Contains(category.CategoryId);
                            var hasChildren = category.SubCategories != null && category.SubCategories.Any();

                            <tr class="align-middle">
                                <td style="padding-left: @(level * 25 + 5)px;">
                                    <a href="/selectpart/@category.CategoryId" class="text-decoration-none text-dark fw-bold">
                                        @category.Name
                                    </a>
                                    @if (hasChildren)
                                    {
                                        <button class="btn btn-sm btn-primary ms-2" @onclick="() => ToggleExpansion(category.CategoryId)">
                                            <span class="oi @(isExpanded ? "oi-minus" : "oi-plus")" aria-hidden="true"></span>
                                            +
                                        </button>
                                    }
                                </td>
                                <td>
                                    @if (BuildStateService.CurrentBuild.SelectedParts.TryGetValue(category.CategoryId, out var selectedParts) && selectedParts.Any())
                                    {
                                        <ul class="list-group list-group-flush">
                                            @foreach (var part in selectedParts)
                                            {
                                                <li class="list-group-item d-flex justify-content-between align-items-center ps-2">
                                                    <div>
                                                        <a href="/partdetail/@part.PartId">@part.Name</a>
                                                        <small class="text-muted ms-2">(@part.BasePrice?.ToString("C"))</small>
                                                    </div>
                                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => RemovePart(part.CategoryId, part.PartId)">
                                                        <span class="oi oi-x" aria-hidden="true"></span>
                                                        DELETE
                                                    </button>
                                                </li>
                                            }
                                        </ul>
                                    }
                                    else
                                    {
                                        <span class="text-muted">No parts selected</span>
                                    }
                                </td>
                                <td class="text-center">
                                    @if (category.AllowMultiple && level > 0)
                                    {
                                        <button class="btn btn-sm btn-primary" @onclick="() => SelectOrChangePart(category.CategoryId)">
                                            <span class="oi oi-plus me-1"></span> Add @category.Name
                                        </button>
                                        <button class="btn btn-sm btn-primary" @onclick="() => SelectOrChangePart(category.CategoryId)">+ Choose</button>
                                    }
                                    else if (!BuildStateService.CurrentBuild.SelectedParts.ContainsKey(category.CategoryId) && level > 0)
                                    {
                                        <button class="btn btn-sm btn-primary" @onclick="() => SelectOrChangePart(category.CategoryId)">+ Choose</button>
                                    }
                                    else if(level > 0)
                                    {
                                        <div class="btn-group">
                                            <button class="btn btn-sm btn-outline-secondary" @onclick="() => SelectOrChangePart(category.CategoryId)">Change</button>
                                            <button class="btn btn-sm btn-outline-danger" @onclick="() => ClearPartsForCategory(category.CategoryId)">Clear</button>
                                        </div>
                                    }
                                </td>
                            </tr>

                            @if (isExpanded && hasChildren)
                            {
                                RenderCategoryRows(category.SubCategories, level + 1);
                            }
                        }
                    }
                    RenderCategoryRows(topLevelCategories, 0);
                }
            </tbody>
        </table>
    </div>
}


@code {
    [SupplyParameterFromQuery(Name = "build")]
    public string? BuildString { get; set; }

    [SupplyParameterFromQuery]
    public int? PassedCategoryId { get; set; }

    [SupplyParameterFromQuery]
    public int? PassedSelectedPartId { get; set; }

    private List<PartCategory> topLevelCategories = new();
    private bool isLoading = true;

    private string? shareableLink;
    private bool linkCopied = false;
    private string? newBuildName;
    private string? saveBuildMessage;
    private bool saveBuildSuccess = false;

    private string ReturnUrlForLogin => Navigation.Uri;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        BuildStateService.OnChange += StateHasChanged;
        try
        {
            var allCategories = await DbContext.PartCategories.ToListAsync();
            var categoryLookup = allCategories.ToDictionary(c => c.CategoryId);
            foreach (var category in allCategories) { category.SubCategories = new List<PartCategory>(); }
            var nonRootCategories = new List<PartCategory>();
            foreach (var category in allCategories)
            {
                if (category.ParentCategoryId.HasValue && categoryLookup.TryGetValue(category.ParentCategoryId.Value, out var parent))
                {
                    parent.SubCategories.Add(category);
                    nonRootCategories.Add(category);
                }
            }
            topLevelCategories = allCategories.Except(nonRootCategories).OrderBy(c => c.Name).ToList();
        }
        finally { isLoading = false; }
    }

    protected override async Task OnParametersSetAsync()
    {
        bool processed = false;
        if (!string.IsNullOrWhiteSpace(BuildString))
        {
            processed = true;
            await BuildStateService.ResetBuild();
            var pairs = BuildString.Split('_');
            foreach (var pair in pairs)
            {
                var ids = pair.Split('-');
                if (ids.Length == 2 && int.TryParse(ids[0], out int catId) && int.TryParse(ids[1], out int partId))
                {
                    var part = await DbContext.Parts.FindAsync(partId);
                    if (part != null) await BuildStateService.AddPart(catId, part);
                }
            }
        }
        else if (PassedSelectedPartId.HasValue && PassedCategoryId.HasValue)
        {
            processed = true;
            var category = topLevelCategories
                .SelectMany(c => c.SubCategories.Append(c))
                .FirstOrDefault(c => c.CategoryId == PassedCategoryId.Value);

            var part = await DbContext.Parts.FindAsync(PassedSelectedPartId.Value);

            if (part != null && category != null)
            {
                if (!category.AllowMultiple)
                {
                     await BuildStateService.ClearPartsForCategory(PassedCategoryId.Value);
                }
                await BuildStateService.AddPart(PassedCategoryId.Value, part);
            }
        }

        if (processed)
        {
        }
    }

    private void ToggleExpansion(int categoryId)
    {
        if (BuildStateService.ExpandedCategoryIds.Contains(categoryId))
        {
            BuildStateService.ExpandedCategoryIds.Remove(categoryId);
        }
        else
        {
            BuildStateService.ExpandedCategoryIds.Add(categoryId);
        }
    }

    private void SelectOrChangePart(int categoryId) => Navigation.NavigateTo($"/selectpart/{categoryId}");
    private async Task RemovePart(int categoryId, int partId) => await BuildStateService.RemovePart(categoryId, partId);
    private async Task ClearPartsForCategory(int categoryId) => await BuildStateService.ClearPartsForCategory(categoryId);

    private void GenerateShareableLink()
    {
        var buildParts = BuildStateService.CurrentBuild.SelectedParts
            .SelectMany(kvp => kvp.Value.Select(part => $"{kvp.Key}-{part.PartId}"));

        if (!buildParts.Any())
        {
            shareableLink = "Please select parts first.";
            return;
        }

        shareableLink = $"{Navigation.ToAbsoluteUri("/enginebuilder")}?build={string.Join("_", buildParts)}";
    }

    private async Task CopyLinkToClipboard()
    {
        if (!string.IsNullOrEmpty(shareableLink))
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", shareableLink);
            linkCopied = true;
            await Task.Delay(2000);
            linkCopied = false;
            StateHasChanged();
        }
    }

    private async Task SaveCurrentBuild()
    {
        if (string.IsNullOrWhiteSpace(newBuildName))
        {
            saveBuildMessage = "Please enter a name for your build.";
            saveBuildSuccess = false;
            return;
        }

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated != true)
        {
            saveBuildMessage = "You must be logged in to save a build.";
            saveBuildSuccess = false;
            return;
        }

        var applicationUser = await UserManager.GetUserAsync(user);
        if (applicationUser == null)
        {
            saveBuildMessage = "Error: Could not find user.";
            saveBuildSuccess = false;
            return;
        }
        
        var buildParts = BuildStateService.CurrentBuild.SelectedParts
            .SelectMany(kvp => kvp.Value.Select(part => $"{kvp.Key}-{part.PartId}"));
            
        if (!buildParts.Any())
        {
            saveBuildMessage = "Cannot save an empty build.";
            saveBuildSuccess = false;
            return;
        }

        var savedBuild = new UserSavedBuild
        {
            UserId = applicationUser.Id,
            BuildName = newBuildName,
            BuildConfigurationString = string.Join("_", buildParts),
            SavedDate = DateTime.UtcNow,
            LastModifiedDate = DateTime.UtcNow
        };

        try
        {
            DbContext.UserSavedBuilds.Add(savedBuild);
            await DbContext.SaveChangesAsync();
            saveBuildMessage = $"Build '{newBuildName}' saved successfully!";
            saveBuildSuccess = true;
            newBuildName = string.Empty;
        }
        catch (Exception ex)
        {
            saveBuildMessage = "Error saving build to database.";
            saveBuildSuccess = false;
            Console.WriteLine($"SaveBuild EXCEPTION: {ex}");
        }
    }
    
    public void Dispose() => BuildStateService.OnChange -= StateHasChanged;
}
