@page "/partcategories"
@using rotaryproject.Data 
@using rotaryproject.Data.Models 
@inject RotaryEngineDbContext DbContext
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations;

<h3>Part Categories</h3>

@if (categories == null)
{
    <p><em>Loading categories or no categories found...</em></p>
}
else
{
    @if (categories.Any())
    {
        <ul>
            @foreach (var category in categories)
            {
                <li>@category.Name - @category.Description</li>
            }
        </ul>
    }
    else
    {
        <p><em>No categories found in the database.</em></p>
    }
}

<hr /> @* MODIFIED: Added a horizontal rule for separation *@

@* --- NEW: Form to Add a New Category --- *@
<h4>Add New Category</h4>
<EditForm Model="@newCategory" OnValidSubmit="@HandleValidSubmit" FormName="AddPartCategoryForm"> @* <<< MODIFIED: Added FormName *@
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="name" class="form-label">Category Name:</label>
        <InputText id="name" class="form-control" @bind-Value="newCategory.Name" @bind-Value:event="oninput" />
        <ValidationMessage For="@(() => newCategory.Name)" />
    </div>

    <div class="mb-3">
        <label for="description" class="form-label">Description:</label>
        <InputText id="description" class="form-control" @bind-Value="newCategory.Description" @bind-Value:event="oninput"/>
        <ValidationMessage For="@(() => newCategory.Description)" />
    </div>

    <button type="submit" class="btn btn-primary">Add Category</button>
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success mt-3" role="alert">
            @successMessage
        </div>
    }
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3" role="alert">
            @errorMessage
        </div>
    }
</EditForm>
@* --- END: Form to Add a New Category --- *@
<p style="color:red;">Debug - Current newCategory.Name: "@newCategory.Name"</p>
@code {
    private List<PartCategory>? categories;

    // --- NEW: Properties for the new category form ---
    private PartCategoryInput newCategory = new PartCategoryInput(); // Using a separate input model
    private string? successMessage;
    private string? errorMessage;
    // --- END: New Properties ---

    protected override async Task OnInitializedAsync()
    {
        await LoadCategoriesAsync();
    }

    // --- NEW: Method to load categories (refactored) ---
    private async Task LoadCategoriesAsync()
    {
        successMessage = null; // Clear success message on load/reload
        // errorMessage = null; // Optionally clear error message on load/reload
        try
        {
            if (DbContext.PartCategories != null)
            {
                categories = await DbContext.PartCategories.OrderBy(c => c.Name).ToListAsync(); // Optionally order them
            }
            else
            {
                Console.WriteLine("Error: PartCategories DbSet is null.");
                categories = new List<PartCategory>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching part categories: {ex.Message}");
            errorMessage = $"Error loading categories: {ex.Message}"; // Show error in UI
            categories = new List<PartCategory>();
        }
    }
    // --- END: Method to load categories ---

    // --- NEW: Handler for form submission ---
    private async Task HandleValidSubmit()
    {
        successMessage = null;
        errorMessage = null;

        if (string.IsNullOrWhiteSpace(newCategory.Name))
        {
            errorMessage = "Category Name cannot be empty.";
            return;
        }

        try
        {
            // Create a new PartCategory entity from the input model
            var categoryToAdd = new PartCategory
            {
                Name = newCategory.Name,
                Description = newCategory.Description
                // CategoryID will be generated by the database (if it's an IDENTITY column)
            };

            if (DbContext.PartCategories != null)
            {
                DbContext.PartCategories.Add(categoryToAdd); // 1. Add the new category to the DbSet
                await DbContext.SaveChangesAsync();      // 2. Save changes to the database

                successMessage = $"Category '{categoryToAdd.Name}' added successfully!";
                newCategory = new PartCategoryInput(); // Reset the form fields
                await LoadCategoriesAsync();         // Refresh the list of categories
            }
            else
            {
                errorMessage = "Error: PartCategories DbSet is null. Cannot add category.";
                Console.WriteLine("Error: PartCategories DbSet is null.");
            }
        }
        catch (DbUpdateException ex) // Catch specific database update exceptions
        {
            // Check for unique constraint violation on Name if you have one
            // This is a common scenario if the 'Name' column has a UNIQUE constraint in the database
            if (ex.InnerException != null && ex.InnerException.Message.Contains("UNIQUE constraint failed") || ex.InnerException.Message.Contains("Cannot insert duplicate key"))
            {
                errorMessage = $"Error: A category with the name '{newCategory.Name ?? "unknown"}' already exists.";
            }
            else
            {
                errorMessage = $"Database error adding category: {ex.Message}";
            }
            Console.WriteLine($"Database error adding category: {ex.ToString()}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error adding category: {ex.Message}";
            Console.WriteLine($"Error adding category: {ex.ToString()}");
        }
        StateHasChanged(); // Ensure UI updates if an error occurs outside of standard lifecycle methods
    }
    // --- END: Handler for form submission ---

    // --- NEW: Input Model Class (good practice) ---
    // It's good practice to use a separate model for your forms,
    // especially if you add validation attributes.
    
    public class PartCategoryInput
{
    [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Category name is required.")]
    [System.ComponentModel.DataAnnotations.StringLength(100, ErrorMessage = "Category name cannot be longer than 100 characters.")]
    public string? Name { get; set; } // Ensure this is public with a public setter

    [System.ComponentModel.DataAnnotations.StringLength(255, ErrorMessage = "Description cannot be longer than 255 characters.")]
    public string? Description { get; set; }
}
    // --- END: Input Model Class ---
}